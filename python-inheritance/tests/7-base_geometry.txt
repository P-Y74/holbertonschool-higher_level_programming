Doctest for BaseGeometry class

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("height", 1)
>>> bg.integer_validator("length", 42)

>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("weight", "heavy")
Traceback (most recent call last):
    ...
TypeError: weight must be an integer

>>> bg.integer_validator("ratio", 3.14)
Traceback (most recent call last):
    ...
TypeError: ratio must be an integer

>>> bg.integer_validator("percentage", 0.5)
Traceback (most recent call last):
    ...
TypeError: percentage must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0

>>> bg.integer_validator("depth", -10)
Traceback (most recent call last):
    ...
ValueError: depth must be greater than 0

>>> bg.integer_validator("temperature", -1)
Traceback (most recent call last):
    ...
ValueError: temperature must be greater than 0

>>> bg.integer_validator("status", True)
Traceback (most recent call last):
    ...
TypeError: status must be an integer

>>> bg.integer_validator("flag", False)
Traceback (most recent call last):
    ...
TypeError: flag must be an integer

>>> bg.integer_validator("data", None)
Traceback (most recent call last):
    ...
TypeError: data must be an integer

>>> bg.integer_validator("items", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: items must be an integer

>>> bg.integer_validator("config", {"key": "value"})
Traceback (most recent call last):
    ...
TypeError: config must be an integer

>>> bg.integer_validator("values", (1, 2))
Traceback (most recent call last):
    ...
TypeError: values must be an integer

>>> bg.integer_validator("chars", {1, 2, 3})
Traceback (most recent call last):
    ...
TypeError: chars must be an integer

>>> bg.integer_validator("big_number", 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)

>>> bg.integer_validator("complex", 1 + 2j)
Traceback (most recent call last):
    ...
TypeError: complex must be an integer

>>> bg.integer_validator("test")
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("name", 42, "extra")
Traceback (most recent call last):
    ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> bg.integer_validator("very_negative", -10**100)
Traceback (most recent call last):
    ...
ValueError: very_negative must be greater than 0
